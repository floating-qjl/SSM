
Spring是什么:
  Spring是分层的Java SE/EE应用full-stack轻量级开源框架，以loC (lnverse Of Control: 反转控制)和AOP  Aspect Oriented Programming: 面向切面编程)为内核。
  提供了展现层SpringMVC和持久层Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，
  还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架。



Spring的优势:

1)方便解耦，简化开发
  通过Spring提供的loC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。
  用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。
  
2) AOP编程的支持
  通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现。
  
3)声明式事务的支持
  可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高T发效率和质量。
  
4)方便程序的测试
  可以用非容器依赖的编程方式进行几乎所有的测试工作，测试不再是昂贵的操作，而是随手可做的事情。

5)方便集成各种优秀框架
  Spring对各种优秀框架(Struts、Hibernate、Hessian、Quartz等)的支持。
  
6)降低JavaEE API的使用难度
  Spring对JavaEE API(如JDBC、JavaMail、远程调用等）进行了薄薄的封装层，使这些API的使用难度大为降低。
  
7) Java源码是经典学习范例
  Spring的源代码设计精妙、结构清晰、匠心独用，处处体现着大师对Java设计模式灵活运用以及对Java技术的高深造诣。它的源代码无意是Java技术的最佳实践的范例。





Spring程序开发步骤:
  导入Spring开发的基本包坐标编写Dao接口和实现类
  创建Spring核心配置文件
  在Spring配置文件中配置UserDaolmpl使用Spring的API获得Bean 实例


Spring的开发步骤:
  导入坐标
  创建Bean
  创建applicationContext.xml
  在配置文件中进行配置
  创建ApplicationContext对象getBean




Spring配置文件：


Bean标签基本配置：
  用于配置对象交由Spring来创建。
  默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。
  
  基本属性:
  id: Bean实例在Spring容器中的唯一标识
  class: Bean的全限定名称




Bean标签范围配置：
  scope: 指对象的作用范围，取值如下:
  
取值范围                 说明
singleton            默认值，单例的
prototype            多例的
request              WEB项目中，Spring创建一个Bean的对象，将对象存入到request域中
session              WEB项目中，Spring创建一个Bean的对象，将对象存入到session域中
global session       WEB项目中，应用在Portlet环境，如果没有Portlet环境那么globalSession相当




当scope的取值为singleton时
  Bean的实例化个数: 1个
  Bean的实例化时机: 当Spring核心文件被加载时，实例化配置的Bean实例
  
  Bean的生命周期:
    对象创建: 当应用加载，创建容器时，对象就被创建了
    对象运行: 只要容器在，对象一直活着
    对象销毁: 当应用卸载，销毁容器时，对象就被销毁了




当scope的取值为prototype时
  Bean的实例化个数: 多个
  Bean的实例化时机: 当调用getBean()方法时实例化Bean
    对象创建: 当使用对象时，创建新的对象实例
    对象运行: 只要对象在使用中，就一直活着
    对象销毁: 当对象长时间不用时，被Java的垃圾回收器回收了


bean标签的内部属性：
  init-method: 指定类中的初始化方法名称
  destroy-method: 指定类中销毁方法名称


<bean id"userDao" class="com.Death.dao.imp1.UserDaoImp1" init-method="init" destroy-method="destroy"> //双引号内部是初始化方法和销毁方法名






Bean实例化三种方式：
  无参构造方法实例化
  工厂静态方法实例化
  工厂实例方法实例化


静态方法：<bean id="userDao" class="com Death.factory.StaticFactory" factory-method="getUserDao"></bean>

实例方法：<bean id="factory" class="com.itheima.factory.DynamicFactory"></bean>
          <bean id="userDao" factory-bean="factory" factory-method="getUserDao">







Bean的依赖注入分析：


目前UserService实例和UserDao实例都存在与Spring容器中，当前的做法是在容器外部获得UserService实例和UserDao实例，然后在程序中进行结合。

getBean ( name : "userService" )
获得UserService实例，发现UserSrvice实例内部需要UserDao实例的save()方法，所以在UserService内部获得UserDao实例
getBean ( name : "userDao")
相当于是在Spring容器外将Dao组装到Service内部完成的操作




因为UserService和UserDao都在Spring容器中，而最终程序直接使用的是UserService，所以可以在Spring容器中，将UserDao设置到UserService内部。

但是该如何设置到内部呢，这就需要使用依赖注入：

依赖注入(Dependency Injection): 它是Spring框架核心IOC的具体实现。
在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。
IOC解耦只是降低他们的依赖关系，但不会消除。例如:业务层仍会调用持久层的方法。
那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。
简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。


注入的两种方式：

构造方法：

UserService文件中：

public UserServiceImp1(UserDao userDao){
  this.userDao = userDao;
)
pub1ic UserServiceImp1(){
}


xml文件中：

<bean id="userService" class="com.Death.service.imp1.UserServiceImp1">
  <constructor-arg name="userDao" ref="userDao"</constructor-arg>
</bean>



set方法：

函数中：
private UserDao userDao;
public void setUserDao(UserDao userDao）{
  this.userDao = userDao;
}
public void save() {
  userDao.save() ;
}


配置文件中：
<bean id="userDao" class="com.Death.dao.imp1.UserDaoImp1"></bean>
<bean id="userService" class="com.Death.service.imp1.UserServiceImp1">
  <property name="userDao” ref="userDao"></property>     //名字是函数中set方法的函数名的后半段的小写形式，与私有变量名没有联系
</bean>


主函数：
public static void main(String[] args){
  ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
  UserService userService = (UserService) app.getBean("userService");
  userService.save(); 
}
//若是直接new UserServece()是不行的（空指针异常），因为并非从Spring容器中拿取，UserDao对象并未注入到UserService中



set注入简化方法：

P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下:
首先，需要引入P命名空间:
  xmlns : p="http : / / www . springframework.org/schema/p"
其次，需要修改注入方式
  <bean id="userService" class=" com.Death.service.imp1 .UserServiceImpl" p:userDao-ref="userDao" />







上面的操作，都是注入的引用Bean，除了对象的引以注入，普通数据类型，集合等都可以在容器中进行注入。
注入数据的三种数据类型:
  普通数据类型
  引用数据类型
  集合数据类型



普通：

public class UserDaoImpl implements UserDao {
  private String username ;
  private int age;
  public void setUsername(String username){
    this.username = username ;
  )
  public void setAge(int age) {
    this.age = age;
  }
}



<bean id="userDao" class="com.Death.dao.imp1.UserDaoImp1">
  <property name="username" value="zhangsan"/>
  <property name="age" value="18"/>
</bean>





集合：

public c1ass UserDaoImpl implements UserDao {
  private List<String> strList;
  private Map<String，User> userMap;
  private Properties properties;
  public void setStrList(List<String> strList){
    this.strList = strList;
  }
  public void setUserMap(Map<String，User> userMap){
    this.userMap = userMap ;
  }
  public void setProperties(Properties properties){
    this.properties = properties;
  }
}


<bean id="user1" class="com.Death.domain.User">
  <property name="name" value="tom"/>
  <property name="addr" value="beijing"/>
</bean>
  
<bean id="user2" c1ass="com.Death.domain.User">
  <property name="name" value=" lucy"/>
  <property name="addr" value="tianjin/>
</bean>




<bean id="userDao" class="com.Death.dao.imp1.UserDaoImp1">
  <property name="strList">
    <list>
      <value>aaa</value>
      <value>bbb</value>
      <value>ccc</value>
    </list>
  </property>
  
  <property name="userMap">
    <map>
      <entry key="u1" value-ref="user1"></entry> // ref表示引用
      <entry key="u2" value-ref="user2"></entry>
    </map>
  </property>


  <property name="properties">            // Properties 为双列集合，有key和value
    <props>
      <prop key="p1">ppp1</prop>
      <prop key="p2">ppp2</prop>
      <prop key="p3">ppp3</prop>
    </props>
  </property>

</bean>




引入其他配置文件（分模块开发):
  实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，
  可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载
    <import resource="applicationcontext-xxx.xml"/>



Spring的重点配置
  <bean>标签
    id属性: 在容器中Bean实例的唯一标识，不允许重复
    class属性: 要实例化的Bean的全限定名
    scope属性: Bean的作用范围，常用是singleton(默认)和prototype
    <property>标签: 属性注入
      name属性: 属性名称
      value属性: 注入的普通属性值
      ref属性: 注入的对象引用值
      <list>标签
      <map>标签
      <properties>标签
    <constructor-arg>标签
  <import>标签:导入其他的spring的分文件





















