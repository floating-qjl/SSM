
IoC(Inversion of Control)控制反转:
  使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转

Spring技术对IoC思想进行了实现
  Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的外部
  IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean

DI(Dependency Injection)依赖注入
  在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入




bean别名配置:

类别           描述

名称           name
类型           属性
所属           bean标签
功能           定义bean的别名，可定义多个，使用逗号(,)分号(;)空格()分隔

范例:
  <bean id="bookDao" name="dao bookDaoImpl" class="com.itheima.dao.imp1.BookDaoImpl"/>
  <bean name="service,bookServiceImpl" class="com.itheima.service.impl.BookServiceImpl"/>

注意事项:
  获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常NoSuchBeanDefinitionException
  NoSuchBeanDefinitionException: No bean named 'bookServiceImpl' available




bean作用范围配置:

类别            描述

名称            scope
类型            属性
所属            bean标签

                定义bean的作用范围，可选范围如下:
功能            singletpn: 单例（默认)
                prototype: 非单例


范例:
  <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl" scope="prototype"/>

若为非单例，则可控制同一个bean生成的对象是否为同一个






bean实例化：
bean本质上就是对象，创建bean使用构造方法完成


实例化bean的三种方式——构造方法（常用)：

提供可访问的构造方法:
  public class BookDaoImpl implements BookDao {
    public BookDaoImpl(){
      System.out.println( "book constructor is running ...");
    }
    public void save(){
        System.out.println( "book dao save ..." );
    }
  }

配置:
  <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>

注意：无参构造方法如果不存在，将抛出异常BeanCreationException




实例化bean的三种方式——静态工厂(了解):

静态工厂:
  public class OrderDaoFactory {
    public static OrderDao getOrderDao(){
      return new OrderDaoImpl();
    }
  }
配置
  <bean id="orderDao" factory-method="getOrderDao" class="com.itheima.factory.OrderDaoFactory"/>




实例化bean的三种方式——实例工厂(了解):

实例工厂:
  public class UserDaoFactory{
    public userDao getUserDao(){
      return new UserDaoImpl();
    }
  }

配置:
  <bean id="userDaoFactory" class="com.itheima.factory.UserDaoFactory" />
  <bean id="userDao" factory-method="getUserDao" factory-bean="userDaoFactory"/>




实例化bean的第四种方式——FactoryBean

FactoryBean:
  public class UserDaoFactoryBean implements FactoryBean<UserDao>{
    public UserDao get0bject() throws Exception {
      return new UserDaoImp1();
    }
    public class<?> getobjectType() {
      return UserDao.class;
    }
  }

配置:
  <bean id="userDao" class="com.itheima.factory.UserDaoFactoryBean"/>































































