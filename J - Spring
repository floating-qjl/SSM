
IoC(Inversion of Control)控制反转:
  使用对象时，由主动new产生对象转换为由外部提供对象，此过程中对象创建控制权由程序转移到外部，此思想称为控制反转

Spring技术对IoC思想进行了实现
  Spring提供了一个容器，称为IoC容器，用来充当IoC思想中的外部
  IoC容器负责对象的创建、初始化等一系列工作，被创建或被管理的对象在IoC容器中统称为Bean

DI(Dependency Injection)依赖注入
  在容器中建立bean与bean之间的依赖关系的整个过程，称为依赖注入




bean别名配置:

类别           描述

名称           name
类型           属性
所属           bean标签
功能           定义bean的别名，可定义多个，使用逗号(,)分号(;)空格()分隔

范例:
  <bean id="bookDao" name="dao bookDaoImpl" class="com.itheima.dao.imp1.BookDaoImpl"/>
  <bean name="service,bookServiceImpl" class="com.itheima.service.impl.BookServiceImpl"/>

注意事项:
  获取bean无论是通过id还是name获取，如果无法获取到，将抛出异常NoSuchBeanDefinitionException
  NoSuchBeanDefinitionException: No bean named 'bookServiceImpl' available




bean作用范围配置:

类别            描述

名称            scope
类型            属性
所属            bean标签

                定义bean的作用范围，可选范围如下:
功能            singletpn: 单例（默认)
                prototype: 非单例


范例:
  <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl" scope="prototype"/>

若为非单例，则可控制同一个bean生成的对象是否为同一个






bean实例化：
bean本质上就是对象，创建bean使用构造方法完成


实例化bean的三种方式——构造方法（常用)：

提供可访问的构造方法:
  public class BookDaoImpl implements BookDao {
    public BookDaoImpl(){
      System.out.println( "book constructor is running ...");
    }
    public void save(){
        System.out.println( "book dao save ..." );
    }
  }

配置:
  <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>

注意：无参构造方法如果不存在，将抛出异常BeanCreationException




实例化bean的三种方式——静态工厂(了解):

静态工厂:
  public class OrderDaoFactory {
    public static OrderDao getOrderDao(){
      return new OrderDaoImpl();
    }
  }
配置
  <bean id="orderDao" factory-method="getOrderDao" class="com.itheima.factory.OrderDaoFactory"/>




实例化bean的三种方式——实例工厂(了解):

实例工厂:
  public class UserDaoFactory{
    public userDao getUserDao(){
      return new UserDaoImpl();
    }
  }

配置:
  <bean id="userDaoFactory" class="com.itheima.factory.UserDaoFactory" />
  <bean id="userDao" factory-method="getUserDao" factory-bean="userDaoFactory"/>




实例化bean的第四种方式——FactoryBean

FactoryBean:
  public class UserDaoFactoryBean implements FactoryBean<UserDao>{
    public UserDao get0bject() throws Exception {
      return new UserDaoImp1();
    }
    public class<?> getobjectType() {
      return UserDao.class;
    }
  }

配置:
  <bean id="userDao" class="com.itheima.factory.UserDaoFactoryBean"/>





bean生命周期:
  生命周期: 从创建到消亡的完整过程
  bean生命周期: bean从创建到销毁的整体过程
  bean生命周期控制: 在bean创建后到销毁前做一些事情

使用bean:
  1.执行业务操作

关闭/销毁容器:
  1.执行bean销毁方法







提供生命周期控制方法:
  public class BookDaoImpl implements BookDao {
    public void save(){
      System.out.println( "book dao save ..." );
    }
    public void init(){
    System.out.println( "book init ..." );
    }
    public void destory(){
      System.out.println( "book destory ... " );
    }
}

配置生命周期控制方法:
  <bean id= "bookDao" class="com.itheima.dao.imp1.BookDaoImp1" init-method="init" destroy-method= "destroy">




bean销毁时机:

容器关闭前触发bean的销毁
关闭容器方式:
  手工关闭容器
    ConfigurableApplicationContext接口close()操作
  注册关闭钩子，在虚拟机退出前先关闭容器再退出虚拟机
    ConfigurableApplicationContext接口registerShutdownHook()操作

public class AppForLifecycle {
  public static void main(String[] args){
    ClassPathXmlApplicationContext ctx = new ClassPathxmlApplicationContext("applicationContext.xml");
    ctx.close();
  }
}








依赖注入方式：

setter注入：
  简单类型：
    在bean中定义引用类型属性并提供可访问的set方法
      public class BookDaoImpl implements BookDao {
        private int connectionNumber;
        public void setConnectionNumber(int connectionNumber) {
          this.connectionNumber = connectionNumber;
        }
      }

      配置中使用property标签value属性注入简单类型数据
      <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl">
        <property name="connectionNumber" value="10"/>
      </bean>


  引用类型：
    在bean中定义引用类型属性并提供可访问的set方法
    public class BookServiceImpl implements BookService{
      private BookDao bookDao;
      public void setBookDao(BookDao bookDao){
        this.bookDao = bookDao;
      }
    }

    配置中使用property标签ref属性注入引用类型对象
    <bean id="bookService" class="com.itheima.service.imp1.BookServiceImpl"
      <property name="bookDao" ref="bookDao"/>
    </bean>
    <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>



构造器注入：
  简单类型:
    在bean中定义引用类型属性并提供可访问的set方法
      public class BookDaoImpl implements BookDao {
        private int connectionNumber;
        public void setConnectionNumber( int connectionNumber) {
          this.connectionNumber = connectionNumber;
        }
      }

    配置中使用constructor-arg标签value属性注入简单类型数据
      <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl">
        <constructor-arg name="connectionNumber" value="10" />
      </bean>



  引用类型:
    在bean中定义引用类型属性并提供可访问的构造方法
      public class BookServiceImpl implements BookService{
        private BookDao bookDao;
        public BookServiceImp1(BookDao bookDao) {
         this.bookDao = bookDao;
        }
      } 

    配置中使用constructor-arg标签ref属性注入引用类型对象
      <bean id="bookService" class="com.itheima.service.impl.BookServiceImpl">
        <constructor-arg name="bookDao" ref="bookDao"/>
      </bean>
      <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>



    参数适配：
      配置中使用constructor-arg标签type属性设置按形参类型注入
        <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl">
          <constructor-arg type="int" value="10"/>
          <constructor-arg type="java.lang.String" value="mysql"/>
        </bean>

      配置中使用constructor-arg标签index属性设置按形参位置注入
        <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl">
          <constructor-arg index="e" value="10"/>
          <constructor-arg index="1" value="mysq1"/>
        </bean>
    




依赖注入方法选择：

1．强制依赖使用构造器进行，使用setter注入有概率不进行注入导致null对象出现
2．可选依赖使用setter注入进行，灵活性强
3. Spring框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨
4．如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用setter注入完成可选依赖的注入
5．实际开发过程中还要根据实际情况分析，如果受控对象没有提供setter方法就必须使用构造器注入
6．自己开发的模块推荐使用setter注入








依赖自动装配：

IoC容器根据bean所依赖的资源在容器中自动查找并注入到bean中的过程称为自动装配
自动装配方式：
    按类型(常用)
    按名称
    按构造方法
    不启用自动装配




配置中使用bean标签autowire属性设置自动装配的类型:
    <bean id="bookDao" class="com.itheima.dao.impl.BookDaoImpl"/>
    <bean id="bookService" class="com.itheima.service.imp1.BookServiceImpl" autowire="byType"/>


注意事项：
  1.自动装配用于引用类型依赖注入，不能对简单类型进行操作
  2.使用按类型装配时(byType)，必须保障容器中相同类型的bean唯一，推荐使用
  3.使用按名称装配时(byName)，必须保障容器中具有指定名称的bean，因变量名与配置耦合，不推荐使用
  4.自动装配优先级低于setter注入与构造器注入，同时出现时自动装配配置失效






注入集合对象：

注入数组对象
  <property name="array">
    <array>
      <value>100</value>
      <value>200</value>
      <value>300</value>
    </array>
  </property>

注入List对象（重点)
  <property name="list">
    <list>
      <value>itcast</value>
      <value>itheima</value>
      <value>boxuegu</value>
    </list>
  </property>

注入Set对象
  <property name="set">
    <set>
      <value>itcast</value>
      <value>itheima</value>
      <value>boxuegu</value>
    </set>
  </property>

注入Map对象（重点）
  <property name="map">
    <map>
      <entry key="country" value="china"/>
      <entry key="province" value="henan"/>
      <entry key="city" value="kaifeng"/>
    </map>
  </property>

注入Properties对象
  <property name="properties">
    <props>
      <prop key="country">china</prop>
      <prop key="province">henan</prop>
      <prop key="city">kaifeng</prop>
    </props>
  </property>






数据源对象管理:

导入druid坐标
  <dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>druid</artifactId>
    <version>1.1.16</version>
  </dependency>

配置数据源对象作为spring管理的bean
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://127.0.0.1:3306/spring_db"/>
    <property name="username" value="root"/>
    <property name="password" value="root"/>
  </bean>





加载properties文件

开启context命名空间：
  <?xml version="1.0" encoding="UTF-8"?>
  <beans xmlns="http://www.springframework.org/schema/beans"
         xmlns :xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:context="http://www.springframework.org/schema/context"
         xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd">

使用context命名空间，加载指定properties文件
  <context:property-placeholder location="jdbc.properties"/>

使用$(}读取加载的属性值
<property name="username" value="${jdbc.username}"/>



注意：

不加载系统属性（防止系统内部环境变量重名导致冲突）
  <context:property-placeholder location="jdbc.properties" system-properties-mode="NEVER"/>
加载多个properties文件
  <context:property-placeholder location="jdbc.properties,msg.properties"/>
加载所有properties文件
  <context :property-placeholder location="*.properties"/>
加载properties文件标准格式
  <context:property-placeholder location="classpath:*.properties"/>
从类路径或jar包中搜索并加载properties文件
  <context:property-placeholder location="classpath*:*.properties"/>




创建容器：

方式一:类路径加载配置文件
  ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
方式二︰文件路径加载配置文件
  ApplicationContext ctx = new FileSystemXmlApplicationContext("D:\lapplicationContext.xm1");
加载多个配置文件
  ApplicationContext ctx = new ClassPath×mlApplicationContext("bean1.xml","bean2.xml");



获取bean：

方式一︰使用bean名称获取
  BookDao bookDao =(BookDao)ctx.getBean("bookDao");
方式二︰使用bean名称获取并指定类型
  BookDao bookDao = ctx.getBean("bookDao", BookDao.class);
方式三︰使用bean类型获
  BookDao bookDao = ctx.getBean(BookDao.class);




BeanFactory初始化

类路径加载配置文件:
  Resource resources = new ClassPathResource("applicationContext.xml");
  BeanFactory bf = new Xm1BeanFactory(resources) ;
  BookDao bookDao = bf.getBean("bookDao",BookDao.class);
  bookDao.save();

BeanFactory创建完毕后，所有的bean均为延迟加载





容器相关：

  BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载
  ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载
  ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能
  ApplicationContext接口常用初始化类
    ClassPathXmlApplicationContext
    FileSystemXmlApplicationContext




纯注解开发：
  Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道
  Java类代替Spring核心配置文件，


@Configuration
@ComponentScan("com.itheima")
public class SpringConfig{
}


注意：
@Configuration注解用于设定当前类为配置类
@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式

例如：ComponentScan({com.itheima.service","com.itheima.dao"})



读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象
//加载配置文件初始化容器
ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
//加载配置类初始化容器
ApplicationContext ctx = new AnnotationConfigApplicationContext(SpringConfig.class);




使用@scope定义bean作用范围
@Repository
@Scope("singleton")
public class BookDaoImpl implements BookDao {
}



使用@PostConstruct、@PreDestroy定义bean生命周期
@Repository
@Scope("singleton")
public class BookDaoImpl implements BookDao {
  public BookDaoImpl() {
    System.out.println("book dag constructor ...");
  }

  @PostConstruct
  public void init(){
    System.out.println( "book init ..." );
  }

  @PreDestroy
  public void destroy()i
    System.out.print1n(" book destory ..." );
  }
}





依赖注入：

使用@Autowired注解开启自动装配模式（按类型)
@Service
public class BookServiceImpl implements BookService {
  @Autowired
  private BookDao bookDao;
  public void setBookDao ( BookDao bookDao) {
    this.bookDao = bookDao;
  }
  public void save() {
    System.out.println("book service save ..." );
    bookDao.save();
  }
}

注意∶自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供setter方法
注意︰自动装配建议使用无参构造方法创建对象（默认），如果不提供对应构造方法，请提供唯一的构造方法




使用@Qualifier注解开启指定名称装配bean@Service
public class BookServiceImpl implements BookService {
  @Autowired
  @Qualifier("bookDao")
  private BookDao bookDao;
}

注意:@Qualifier注解无法单独使用，必须配合@Autowired注解使用




使用@Value实现简单类型注入
@Repository("bookDao")
public class BookDaoImpl implements BookDao {
  @Value("100")
  private string connectionNum;
}



使用@PropertySource注解加载properties文件
@Configuration
@ComponentScan("com.itheima")
@PropertySource("classpath:jdbc.properties")
public class SpringConfig {
}

注意∶路径仅支持单一文件配置，多文件请使用数组格式配置，不允许使用通配符*





第三方bean管理：

使用@Bean配置第三方bean@Configuration
public class SpringConfig {
  @Bean
  public DataSource dataSource(){
    DruidDataSource ds = new DruidDataSource( );
    ds.setDriverclassName("com.mysql.jdbc.Driver");
    ds.setUr1("jdbc:mysql://localhost:3306/spring_db");
    ds.setUsername("root");
    ds.setPassword("root");
    return ds;
    }
}



使用独立的配置类管理第三方bean

public class jdbcConfig{
  public DataSource dataSource(){
    DruidDataSource ds = new DruidDataSource( );
    ds.setDriverclassName("com.mysql.jdbc.Driver");
    ds.setUr1("jdbc:mysql://localhost:3306/spring_db");
    ds.setUsername("root");
    ds.setPassword("root");
    return ds;
    }
}



方式一:导入式
public class JdbcConfig {
  @Bean
  public DataSource dataSource(){
    DruidDataSource ds = new DruidDataSource();/相关配置
    return ds;
  }
}

使用@Import注解手动加入配置类到核心配置，此注解只能添加一次，多个数据请用数组格式

@Configuration
@Import(jdbcConfig.class)
public class SpringConfig {
}



方式二︰扫描式（不推荐）
@Configuration
public class JdbcConfig {
  @Bean
  public DataSource dataSource(){
    DruidDataSource ds = new DruidDataSource();//相关配置
    return ds;
  }
}

使用@ComponentScan注解扫描配置类所在的包，加载对应的配置类信息

@Configuration
@ComponentScan({"com.itheima.config","com.itheima.service","com.itheima.dao"})
public class SpringConfig {
}





第三方bean依赖注入:

简单类型依赖注入
public class JdbcConfig {
  @Value("com.mysql.jdbc.Driver")
  private string driver;
  @Value("jdbc:mysql://localhost:3306/spring_db")
  private String url;
  @Value("root")
  private String userName;
  @Value("root")
  private String password;
  @Bean
  public DataSource dataSource(){
    DruidDataSource ds = new DruidDataSource();
    ds.setDriverClassName(driver);
    ds.setUrl(ur1);
    ds.setUsername(userName);
    ds.setPassword(userName);
    return ds;
  }
}



引用类型依赖注入
@Bean
public DataSource dataSource(BookService bookService){
  System.out.println(bookService);
  DruidDataSource ds = new DruidDataSource();//属性设置
  return ds;
}

引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象（按类型装配）








Spring整合mybatis：

public class MybatisConfig {
    //定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象
    @Bean
    public SqlSessionFactoryBean sqlSessionFactory(DataSource dataSource){
        SqlSessionFactoryBean ssfb = new SqlSessionFactoryBean();
        ssfb.setTypeAliasesPackage("com.itheima.domain");
        ssfb.setDataSource(dataSource);
        return ssfb;
    }

    //定义bean，返回MapperScannerConfigurer对象
    @Bean
    public MapperScannerConfigurer mapperScannerConfigurer(){
        MapperScannerConfigurer msc = new MapperScannerConfigurer();
        msc.setBasePackage("com.itheima.dao");
        return msc;
    }
}




使用Spring整合Junit专用的类加载器：

@Runwith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = SpringConfig.class)
public class BookServiceTest {
  @Autowired
  private BookService bookService;

  @Test
  public void testSave(){
    bookService.save();
  }
}







AOP简介

AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构
  OOP(object Oriented Programming)面向对象编程
作用： 在不惊动原始设计的基础上为其进行功能增强
Spring理念:无入侵式/无侵入式




AOP核心概念：

连接点(JoinPoint): 程序执行过程中的任意位置，粒度为执行方法、抛出异常、设置变量等在
  SpringAOP中，理解为方法的执行
切入点(Pointcut): 匹配连接点的式子
  在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法
    一个具体方法: com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法
    匹配多个方法: 所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法
通知(Advice): 在切入点处执行的操作，也就是共性功能
  在SpringAOP中，功能最终以方法的形式呈现
通知类: 定义通知的类
切面(Aspect): 描述通知与切入点的对应关系
目标对象(Target): 原始功能去掉共性功能对应的类产生的对象，这种对象是无法直接完成最终工作的
代理(Proxy): 目标对象无法直接完成工作，需要对其进行功能回填，通过原始对象的代理对象实现


案例：

导入aop相关坐标：
<dependency>
  <groupId>org.aspectj</groupId>
  <artifactId>aspectjweaver</artifactId>
  <version>1.9.4</version>
</dependency>



定义dao接口与实现类：
public interface BookDao {
  public void save();
  public void update();
}

@Repository
public class BookDaoImpl implements BookDao {
  public void save(){
    System.out.println(System.currentTimeMillis());
    System.out.println( "book dao save ..." );
}
  public void update(){
    System. out.println( "book dao update ..." );
  }
}



绑定切入点与通知关系，并指定通知添加到原始连接点的具体执行位置
public class MyAdvice {
  //切入点
  @Pointcut("execution(void com.itheima.dao.BookDao.update())")
  private void pt(){}
  //切面
  @Before("pt()")
  public void before(){
    System.out.println(System.currentTimeMillis());
  }
}


说明︰切入点定义依托一个不具有实际意义的方法进行，即无参数，无返回值，方法体无实际逻辑





AOP工作流程：

1. Spring容器启动
2．读取所有切面配置中的切入点（已经投入使用的切入点）
3．初始化bean，判定bean对应的类中的方法是否匹配到任意切入点
   匹配失败，创建对象
   匹配成功，创建原始对象（目标对象）的代理对象
4．获取bean执行方法
   获取bean，调用方法并执行，完成操作
   获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作






AOP切入点表达式:

切入点︰要进行增强的方法
切入点表达式∶要进行增强的方法的描述方式



描述方式一:执行com.itheima.dao包下的BookDao接口中的无参数update方法（接口）
  execution(void com.itheima.dao.BookDao.update( ))
描述方式二:执行com.itheima.dao.impl包下的BookDaoImpl类中的我参数update方法（实现类）
  execution(void com.itheima.dao.impl.BookDaoImpl.update())



切入点表达式标准格式∶
动作关键字(访问修饰符返回值,包名.类/接口名.方法名（参数）异常名)
  execution (public User com.itheima.service.UserService.findById(int))

动作关键字∶描述切入点的行为动作，例如execution表示执行到指定切入点
访问修饰符: public , private等，可以省略
返回值
包名
类/接口名
方法名
参数
异常名∶方法定义中抛出指定异常，可以省略





可以使用通配符描述切入点，快速描述
  *: 单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现
    execution (public * com.itheima. *.UserService.find* (*))
    匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法
  ..: 多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写
    execution (public User com..UserService.findById(..))
    匹配com包下的任意包中的UserService类或接口中所有名称为findByld的方法
  +: 专用于匹配子类类型
    execution(* *..*Service+.*(..))
    匹配任意包下以Service结尾的具有任意参数和任意返回值的接口子类（子接口或实现类）




书写技巧：
  所有代码按照标准规范开发，否则以下技巧全部失效
  描述切入点通常描述接口，而不描述实现类
  访问控制修饰符针对接口开发均采用public描述（可省略访问控制修饰符描述)
  返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述
  包名书写尽量不使用..匹配，效率过低，常用*做单个包描述匹配，或精准匹配
  接口名/类名书写名称与模块相关的采用*匹配，例如UserService书写成*Service，绑定业务层接口名
  方法名书写以动词进行精准匹配，名词采用*匹配，例如getByld书写成getBy*,selectAll书写成selectAll
  参数规则较为复杂，根据业务方法灵活调整
  通常不使用异常作为匹配规则






AOP通知类型：

  AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置
  AOP通知共分为5种类型：
    前置通知
    后置通知
    环绕通知(重点)
    返回后通知(了解)
    抛出异常后通知(了解)





名称: @Before
类型: 方法注解
位置: 通知方法定义上方
作用: 设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行
范例:
  @Before("pt()")
  public void before() {
    System.out.println("before advice ...");
  }
相关属性: value(默认): 切入点方法名，格式为类名.方法名()



名称: @After
类型: 方法注解
位置: 通知方法定义上方
作用: 设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法后运行
范例:
  @After("pt()")
  public void after() {
    System.out.println("after advice ...");
  }
相关属性: value(默认): 切入点方法名，格式为类名.方法名()



名称: @Around(重点，常用)
类型: 方法注解
位置: 通知方法定义上方
作用: 设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行
范例:
  @Around("pt()")
  public 0bject around(ProceedingJoinPoint pjp) throws Throwable {
    System.out.println("around before advice ...");
    object ret = pjp.proceed();
    System.out.println("around after advice ...");
    return ret;
  }


@Around注意事项:
  1. 环绕通知必须依赖形参ProceedingJoinPoint才能实现对原始方法的调用，进而实现原始方法调用前后同时添加通知
  2. 通知中如果未使用ProceedingJoinPoint对原始方法进行调用将跳过原始方法的执行
  3. 对原始方法的调用可以不接收返回值，通知方法设置成void即可，如果接收返回值，必须设定为Object类型
  4．原始方法的返回值如果是void类型，通知方法的返回值类型可以设置成void，也可以设置成Object
  5. 由于无法预知原始方法运行后是否会抛出异常，因此环绕通知方法必须抛出Throwable对象



名称: @AfterReturning(了解)
类型: 方法注解
位置: 通知方法定义上方
作用: 设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法正常执行完毕后运行
范例:
  @AfterReturning("pt()")
  public void afterReturning(){
    System.out.println("afterReturning advice ...");
  }
相关属性: value (默认): 切入点方法名，格式为类名.方法名()




名称: @AfterThrowing(了解)
类型: 方法注解
位置: 通知方法定义上方
作用: 设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行
范例:
  @AfterThrowing("pt()")
  public void afterThrowing(){
    System.out.println("afterThrowing advice ...");
  }
相关属性: value (默认): 切入点方法名，格式为类名.方法名()



























