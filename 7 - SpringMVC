
SpringMVC概述：
  SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。
  SpringMVC已经成为目前最主流的MVC框架之一，并且随着Spring3.0的发布，全面超越Struts2，成为最优秀的MVC框架。
  它通过一套注解,,让一个简单的Java类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful编程风格的请求。






SpringMVC快速入门：
  需求:客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。
  
开发步骤:
  导入SpringMVC相关坐标
  配置SpringMVC核心控制器DispathcerServlet
  创建Controller类和视图页面
  使用注解配置Controller类中业务方法的映射地址
  配置SpringMVC核心文件spring-mvc.xml
  客户端发起请求测试





Tomcat引擎:
  1、接收客户端请求，解析请求资源地址
  2、创建代表请求req对象
  3、创建代表响应resp对象
  4、调用目标资源
  5、获得resp中的内容，组装成http响应返回客户端





代码：

spring-mvc.xml文件：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd ">

    <!--  组件扫描  -->
    <context:component-scan base-package="com.Death.controller"/>


</beans>





UserController.java文件：

@Controller
public class UserController {


    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success.jsp";
    }
}






web.xml文件：


    <!--  配置SpringMVC的前端控制器  -->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>






success.jsp文件：

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
</head>
<body>

    <h1>Success!</h1>

</body>
</html>








SpringMVC组件解析：

SpringMVC的执行流程：
  用户发送请求至前端控制器DispatcherServlet。
  DispatcherServlet收到请求调用HandlerMapping处理器映射器。
  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
  DispatcherServlet调用HandlerAdapter处理器适配器。
  HandlerAdapter经过适配调用具体的处理器(Controller，t也叫后端控制器)。
  Controller执行完成返回ModelAndView。
  HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。
  DispatcherServlet将ModelAndView传给ViewReslover视图解析器。
  ViewReslover解析后返回具体View。
  DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)。DispatcherServlet响应用户。









SpringMVC注解解析：

RequestMapping
  作用: 用于建立请求URL和处理请求方法之间的对应关系
  位置:
    类上，请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录
    方法上，请求URL的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径
  属性:
    value: 用于指定请求的URL。它和path属性的作用是一样的
    method: 用于指定请求的方式
    params: 用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样
  例如:
    params = {"accountName"}，表示请求参数必须有accountName
    params = {"moeny!100"}，表示请求参数中money不能是100





SpringMVC注解解析：

  1. mvc命名空间引入
    命名空间: xmlns:context="http://www.springframework.org/schema/context"
              xmlns:mvc="http://www.springframework.org/schema/mvc"
    约束地址: http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/mvc
              http://www.springframework.org/schema/mvc/spring-mvc.xsd
  2. 组件扫描
    SpringMvc基于spring容器，所以在进行springMvc操作时，需要将controller存储到spring容器中，如果使用@controller注解标注的话，
    就需要使用<context:component-scan base-package="com.itheima.controller"/>进行组件扫描。

另一种组件扫描写法：

    <!--  组件扫描  -->
    <context:component-scan base-package="com.Death">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>







视图解析器:

SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址
org/springframework/web/servlet/DispatcherServlet.properties，该文件中配置了默认的视图解析器，
如下:
  org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver
  
翻看该解析器源码，可以看到该解析器的默认设置，如下:

  REDIRECT_URL_PREFI= "redirect:" --重定向前缀
  FORWARD_URL_PREFI= "forward:" --转发前缀（默认值)
  prefix = ""; --视图名称前缀
  suffix = ""; --视图名称后缀




代码：

    <!-- 配置内部资源视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- /jsp/success.jsp  -->
        <property name="prefix" value="/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
    
    
    
UserController.java文件：


@Controller
public class UserController {


    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success";
    }
}




知识要点：

SpringMVC的相关组件
  前端控制器: DispatcherServlet
  处理器映射器: HandlerMapping
  处理器适配器: HandlerAdapter
  处理器: Handler
  视图解析器: View Resolver
  视图: View
  
SpringMVC的注解和配置
  请求映射注解: @RequestMapping
  视图解析器配置:
    REDIRECT_URL_PREFIX = "redirect:"
    FORWARD_URL_PREFIX = "forward:"
    prefix = "";
    suffix = "";









SpringMVC的数据响应：




SpringMVC的数据响应方式：

  1)页面跳转
    直接返回字符串
    通过ModelAndView对象返回
  2)回写数据
    直接返回字符串
    返回对象或集合




页面跳转：
1. 返回字符串形式
   直接返回字符串: 此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。
    RequestMapping ("/quick")                                     <property name="prefix" value="/WEB-INF/views/" />
    public string quickMethod ( ) {                               <property name="suffix" value=".jsp" />
       return  "index";
    }

                                   转发资源地址:/WEB-INF/views/index.jsp
                                   
返回带有前缀的字符串:
  转发: forward:/WEB-INE/views/index.jsp
  重定向: redirect:/index.jsp



2. 通过ModelAndView对象返回

代码：
    @RequestMapping("/quick5")
    public String save5(HttpServletRequest request){
        //此方式不常用，尽量使用框架提供的对象，该request由JSP创建，会增加耦合
        request.setAttribute("username","666");
        return "success";
    }

    @RequestMapping("/quick4")
    public String save4(Model model){
        model.addAttribute("username","sb");
        return "success";
    }

    @RequestMapping("/quick3")
    public ModelAndView save3(ModelAndView modelAndView){
        //设置模型数据
        modelAndView.addObject("username","haha");
        //设置视图名称
        modelAndView.setViewName("success");
        return modelAndView;
    }


    @RequestMapping("/quick2")
    public ModelAndView save2(){
        //Model:模型 作用封装数据
        //View: 视图 作用展示数据
        ModelAndView modelAndView = new ModelAndView();
        //设置模型数据
        modelAndView.addObject("username","heihei");
        //设置视图名称
        modelAndView.setViewName("success");

        return modelAndView;
    }

    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success";
    }






回写数据：

1. 直接返回字符串

    Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话，只需要使用
    response.getWriter().print(“hello world”)即可，那么在Controller中想直接回写字符串该怎样呢?
    
    通过SpringMVC框架注入的response对象，使用response.getWriter().print("hello world")回写数
    据，此时不需要视图跳转，业务方法返回值为void。
    
    RequestMapping ("/quick4")
    public void quickMethod4(HttpserletResponse response) throws工OException {
       response.getwriter().print("hello world");
    }





    实际上，也可以像页面跳转一样返回一个字符串，但是StringMVC还没智能到能够分辨String对象到底是跳转还是回写
    因此可以将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。
    
    @RequestMapping("/quick5")
    @ResponseBody
    public string quickMethod5 () throws IOException {
        return "hello springMVC! ! !";
    }



2. 返回对象或集合












































