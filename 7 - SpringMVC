
SpringMVC概述：
  SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中。
  SpringMVC已经成为目前最主流的MVC框架之一，并且随着Spring3.0的发布，全面超越Struts2，成为最优秀的MVC框架。
  它通过一套注解,,让一个简单的Java类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful编程风格的请求。






SpringMVC快速入门：
  需求:客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。
  
开发步骤:
  导入SpringMVC相关坐标
  配置SpringMVC核心控制器DispathcerServlet
  创建Controller类和视图页面
  使用注解配置Controller类中业务方法的映射地址
  配置SpringMVC核心文件spring-mvc.xml
  客户端发起请求测试





Tomcat引擎:
  1、接收客户端请求，解析请求资源地址
  2、创建代表请求req对象
  3、创建代表响应resp对象
  4、调用目标资源
  5、获得resp中的内容，组装成http响应返回客户端





代码：

spring-mvc.xml文件：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd ">

    <!--  组件扫描  -->
    <context:component-scan base-package="com.Death.controller"/>


</beans>





UserController.java文件：

@Controller
public class UserController {


    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success.jsp";
    }
}






web.xml文件：


    <!--  配置SpringMVC的前端控制器  -->
    <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>






success.jsp文件：

<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Title</title>
</head>
<body>

    <h1>Success!</h1>

</body>
</html>








SpringMVC组件解析：

SpringMVC的执行流程：
  用户发送请求至前端控制器DispatcherServlet。
  DispatcherServlet收到请求调用HandlerMapping处理器映射器。
  处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
  DispatcherServlet调用HandlerAdapter处理器适配器。
  HandlerAdapter经过适配调用具体的处理器(Controller，t也叫后端控制器)。
  Controller执行完成返回ModelAndView。
  HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。
  DispatcherServlet将ModelAndView传给ViewReslover视图解析器。
  ViewReslover解析后返回具体View。
  DispatcherServlet根据View进行渲染视图(即将模型数据填充至视图中)。DispatcherServlet响应用户。









SpringMVC注解解析：

RequestMapping
  作用: 用于建立请求URL和处理请求方法之间的对应关系
  位置:
    类上，请求URL的第一级访问目录。此处不写的话，就相当于应用的根目录
    方法上，请求URL的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径
  属性:
    value: 用于指定请求的URL。它和path属性的作用是一样的
    method: 用于指定请求的方式
    params: 用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样
  例如:
    params = {"accountName"}，表示请求参数必须有accountName
    params = {"moeny!100"}，表示请求参数中money不能是100





SpringMVC注解解析：

  1. mvc命名空间引入
    命名空间: xmlns:context="http://www.springframework.org/schema/context"
              xmlns:mvc="http://www.springframework.org/schema/mvc"
    约束地址: http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/mvc
              http://www.springframework.org/schema/mvc/spring-mvc.xsd
  2. 组件扫描
    SpringMvc基于spring容器，所以在进行springMvc操作时，需要将controller存储到spring容器中，如果使用@controller注解标注的话，
    就需要使用<context:component-scan base-package="com.itheima.controller"/>进行组件扫描。

另一种组件扫描写法：

    <!--  组件扫描  -->
    <context:component-scan base-package="com.Death">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>







视图解析器:

SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址
org/springframework/web/servlet/DispatcherServlet.properties，该文件中配置了默认的视图解析器，
如下:
  org.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolver
  
翻看该解析器源码，可以看到该解析器的默认设置，如下:

  REDIRECT_URL_PREFI= "redirect:" --重定向前缀
  FORWARD_URL_PREFI= "forward:" --转发前缀（默认值)
  prefix = ""; --视图名称前缀
  suffix = ""; --视图名称后缀




代码：

    <!-- 配置内部资源视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- /jsp/success.jsp  -->
        <property name="prefix" value="/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    
    
    
    
UserController.java文件：


@Controller
public class UserController {


    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success";
    }
}




知识要点：

SpringMVC的相关组件
  前端控制器: DispatcherServlet
  处理器映射器: HandlerMapping
  处理器适配器: HandlerAdapter
  处理器: Handler
  视图解析器: View Resolver
  视图: View
  
SpringMVC的注解和配置
  请求映射注解: @RequestMapping
  视图解析器配置:
    REDIRECT_URL_PREFIX = "redirect:"
    FORWARD_URL_PREFIX = "forward:"
    prefix = "";
    suffix = "";









SpringMVC的数据响应：




SpringMVC的数据响应方式：

  1)页面跳转
    直接返回字符串
    通过ModelAndView对象返回
  2)回写数据
    直接返回字符串
    返回对象或集合




页面跳转：
1. 返回字符串形式
   直接返回字符串: 此种方式会将返回的字符串与视图解析器的前后缀拼接后跳转。
    RequestMapping ("/quick")                                     <property name="prefix" value="/WEB-INF/views/" />
    public string quickMethod ( ) {                               <property name="suffix" value=".jsp" />
       return  "index";
    }

                                   转发资源地址:/WEB-INF/views/index.jsp
                                   
返回带有前缀的字符串:
  转发: forward:/WEB-INE/views/index.jsp
  重定向: redirect:/index.jsp



2. 通过ModelAndView对象返回

代码：
    @RequestMapping("/quick5")
    public String save5(HttpServletRequest request){
        //此方式不常用，尽量使用框架提供的对象，该request由JSP创建，会增加耦合
        request.setAttribute("username","666");
        return "success";
    }

    @RequestMapping("/quick4")
    public String save4(Model model){
        model.addAttribute("username","sb");
        return "success";
    }

    @RequestMapping("/quick3")
    public ModelAndView save3(ModelAndView modelAndView){
        //设置模型数据
        modelAndView.addObject("username","haha");
        //设置视图名称
        modelAndView.setViewName("success");
        return modelAndView;
    }


    @RequestMapping("/quick2")
    public ModelAndView save2(){
        //Model:模型 作用封装数据
        //View: 视图 作用展示数据
        ModelAndView modelAndView = new ModelAndView();
        //设置模型数据
        modelAndView.addObject("username","heihei");
        //设置视图名称
        modelAndView.setViewName("success");

        return modelAndView;
    }

    @RequestMapping("/quick")
    public String save(){
        System.out.println("Controller sava running");
        return "success";
    }






回写数据：

1. 直接返回字符串

    Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话，只需要使用
    response.getWriter().print(“hello world”)即可，那么在Controller中想直接回写字符串该怎样呢?
    
    通过SpringMVC框架注入的response对象，使用response.getWriter().print("hello world")回写数
    据，此时不需要视图跳转，业务方法返回值为void。
    
    RequestMapping ("/quick4")
    public void quickMethod4(HttpserletResponse response) throws工OException {
       response.getwriter().print("hello world");
    }





    实际上，也可以像页面跳转一样返回一个字符串，但是StringMVC还没智能到能够分辨String对象到底是跳转还是回写
    因此可以将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回。
    
    @RequestMapping("/quick5")
    @ResponseBody
    public string quickMethod5 () throws IOException {
        return "hello springMVC! ! !";
    }




代码：

    @RequestMapping("/quick9")
    @ResponseBody   //告知SpringMVC框架 该方法不进行视图跳转 直接进行数据响应
    public String save9() throws IOException {
        User user = new User();
        user.setUsername("lisi");
        user.setAge(30);
        //使用json的转换工具将对象转换成json格式字符串再返回
        ObjectMapper objectMapper = new ObjectMapper();
        String json = objectMapper.writeValueAsString(user);

        return json;
    }

    @RequestMapping("/quick8")
    @ResponseBody   //告知SpringMVC框架 该方法不进行视图跳转 直接进行数据响应
    public String save8() throws IOException {
        return "{\"username\":\"zhangsan\",\"age\":18}";
    }

    @RequestMapping("/quick7")
    @ResponseBody   //告知SpringMVC框架 该方法不进行视图跳转 直接进行数据响应
    public String save7() throws IOException {
        return "hello heihei";
    }

    @RequestMapping("/quick6")
    public void save6(HttpServletResponse response) throws IOException {
        response.getWriter().print("hello heihei");
    }




json的依赖：
  
          <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.9.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.9.0</version>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.9.0</version>
        </dependency>






2. 返回对象或集合

通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，
指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置:
  <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
    <property name="messageConverters">
      <list>
        <bean class="org.springframework .http. converter.json.MappingJackson2HttpMessageConverter"></bean>
      </list>
    </property>
  </bean>


代码：

    @RequestMapping("/quick10")
    @ResponseBody
    //期望SpringMVC自动将User转换成json格式的字符串
    public User save10() throws IOException {
        User user = new User();
        user.setUsername("lisi");
        user.setAge(30);

        return user;
    }




在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，
因此，我们可以使用mvc的注解驱区动代替上述配置。
  <!--mvc的注解驱动-->
  <mvc : annotation-driven/>
  
在SpringMVC的各个组件中，处理器映射器、处理器适配器、视图解析器称为SpringMVC的三大组件。
使用<mvc:annotation-driven>自动加载RequestMappingHandlerMapping(处理映射器）和RequestMappingHandlerAdapter (处理适配器），
可用在Spring-xml.xml配置文件中使用<mvcannotation-driven>替代注解处理器和适配器的配置。
同时使用<mvc:annotation-driven>默认底层就会集成jackson进行对象或集合的json格式字符串的转换。

这就需要使用mvc命名空间：

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd ">












SpringMVC获得请求数据：

获得请求参数：
  客户端请求参数的格式是: name=value&name=value.....
  服务器端要获得请求的参数，有时还需要进行数据的封装，
  SpringMVC可以接收如下类型的参数:
    基本类型参数
    POJO类型参数
    数组类型参数
    集合类型参数






获得基本类型参数：
  Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配.
  http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&age=18
  
  @RequestMapping ("/quick9")
  @ResponseBody
  public void quickMethod9(String username,int age) throws IOException {
    System.out.println (username) ;
    System.out.println (age) ;
  }




获得POJO类型参数：
  Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。
  http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&age=18
  
  public class User {
    private String username;
    private int age;
    getterlsetter...
  }
  
  @RequestMapping ("/quick10")
  @ResponseBody
  public void quickMethod10(User user) throws IOException {
    System.out.println (user) ;
  }





获得数组类型参数：
  Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。
  http://localhost:8080/itheima-springmvc1/quick12?strs=111&strs=222&strs=333
  
  @RequestMapping ("/quick11")
  @ResponseBody
  public void quickMethod11(string[] strs) throws IOException {
    System.out.println (Arrays.asList(strs));
  }






获得集合类型参数：
  获得集合参数时，要将集合参数包装到一个POJO中才可以。规则与上面相同
  http://localhost:8080/MVC/form.jsp
  
    @RequestMapping("/quick14")
    @ResponseBody
    public void save14(VO vo) throws IOException {
        System.out.println(vo.toString());
    }
    
    
    输入数据比较麻烦：
    VO类：
      public class VO {
        private List<User> userList;

        public List<User> getUserList() {
          return userList;
        }

        public void setUserList(List<User> userList) {
          this.userList = userList;
        }

        @Override
        public String toString() {
          return "VO{" +
                  "userList=" + userList +
                  '}';
        }
      }
      
    form.jsp文件：
      <body>
        <form action="${pageContext.request.contextPath}/quick14" method="post">
          <%--表明是第几个User对象的username age--%>
              <input type="text" name="userList[0].username"><br/>
              <input type="text" name="userList[0].age"><br/>
              <input type="text" name="userList[1].username"><br/>
              <input type="text" name="userList[1].age"><br/>
              <input type="submit" value="提交">
        </form>
      </body>



特殊情况：
  当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装。
  

    @RequestMapping("/quick15")
    @ResponseBody
    public void save15(@RequestBody List<User> userList) throws IOException {
        System.out.println(userList);
    }


    Spring-mvc.xml:
    
    //解放权限
    <mvc:resources mapping="/js/**" location="/js/"></mvc:resources>   
    //或者
    <mvc:default-servlet-handler/>



  //导入jQuery包
  <script>//模拟数据
    var userList = new Array();
    userList.push ( {username : "zhangsan" , age: "20" } );
    userList.push ( {username: "lisi " , age: "20"" } );
    
    $.ajax ( {
      type: "POST" ,
      url: "/itheima_springmvc1/quick13",
      data: JSON.stringify ( userList),
      contentType : ' application/json ;charset=utf-8'
    });
  </script>



  //导入axios包
  <head>
    <meta charset="UTF-8">
    <title>Title</title>

    <script src="${pageContext.request.contextPath}/js/axios-0.18.0.js"></script>
    <script>

        var userList = new Array();
        userList.push({username:"zhangsan",age:18});
        userList.push({username:"lisi",age:66});

        axios({
            method:"POST",
            
            /* headers:{
                'Content-Type':'application/json;charset=UTF-8'
            }, */
            
            data:userList,
            url:"${pageContext.request.contextPath}/quick15"
        }).then(function (resp) {})
    </script>



</head>







请求数据乱码问题:
  当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。
  
<filter>
  <filter-name>CharacterEncodingFilter</filter-name>
  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  <init-param>
    <param-name>encoding</param-name>
    <param-value>UTF-8</param-value>
  </init-param>
</filter>

<filter-mapping>
  <filter-name>CharacterEncodingFilter</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>








参数绑定注解@requestParam:
  注解@RequestParam还有如下参数可以使用:
    value: 与请求参数名称
    required: 此在指定的请求参数是否必须包括，默认是true，提交时如果没有此参数则报错
    defaultValue: 当没有指定请求参数时，则使用指定的默认值赋值
    
@RequestMapping("/quick14")
@ResponseBody
public void quickMethod14(@RequestParam (value="name",required=false, defaultvalue = "itcast" ) string username) throws IOException {
  System.out.println (username);
}







获得Restful风格的参数：

Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交
互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。


Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP协议里面四个表示操作方式的动词如下:
GET:用于获取资源
POST:用于新建资源
PUT:用于更新资源
DELETE:用于删除资源

例如:
/user/1 GET :得到id = 1的user
/user/1 DELETE :删除id = 1的user
/user/1 PUT :更新id = 1的user
/user   POST :新增user


上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。
地址/user/1可以写成/user/{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。

例如：
http://localhost:8080/itheima_springmvc1/quick19/zhangsan

@RequestMapping ("/quick19/{name}")
@ResponseBody
public void quickMethod19(@Pathvariable (value = "name",required = true) String Username)
  System.out.println(Username);
}


















