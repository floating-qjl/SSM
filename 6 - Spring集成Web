
应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件)方式获取的，
但是每次从容器中获得Bean时都要编写newClasspathXmIApplicationContext(spring配置文件)，
这样的弊端是配置文件加载多次，应用上下文对象创建多次。



在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，
就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，
这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。


代码：

ContextLoaderListener.java（监听器）：

public class ContextLoaderListener implements ServletContextListener {
    public void contextInitialized(ServletContextEvent sce) {

        ServletContext servletContext = sce.getServletContext();

        //读取web.xml中的全局参数
        String app1 = servletContext.getInitParameter("app1");
        ApplicationContext app = new ClassPathXmlApplicationContext(app1 );

        //将Spring的应用上下文对象存储到ServletContext域中
        servletContext.setAttribute("app",app);
    }

    public void contextDestroyed(ServletContextEvent sce) {

    }
}



WebApplicationContextUtils.java（工具类）：

public class WebApplicationContextUtils {

    public static ApplicationContext getWebApplicationContext(ServletContext servletContext){
        return (ApplicationContext) servletContext.getAttribute("app");
    }
}




UserServlet文件：

public class UserServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        //ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
        ServletContext servletContext = this.getServletContext();
        //ApplicationContext app = (ApplicationContext) servletContext.getAttribute("app");
        ApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);
        UserService userService = app.getBean(UserService.class);
        userService.save();
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        super.doGet(req, resp);
    }
}



web.xml文件：

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 全局初始化参数 -->
    <context-param>
        <param-name>app1</param-name>
        <param-value>applicationContext.xml</param-value>
    </context-param>


    <!--配置监听器-->
    <listener>
        <listener-class>com.Death.listen.ContextLoaderListener</listener-class>
    </listener>


    <servlet>
        <servlet-name>UserServlet</servlet-name>
        <servlet-class>com.Death.web.UserServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>UserServlet</servlet-name>
        <url-pattern>userServlet</url-pattern>
    </servlet-mapping>

</web-app>








Spring提供获取应用上下文的工具：
上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，
该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，
提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。



所以我们需要做的只有两件事:
  在web.xml中配置ContextLoaderListener监听器(导入spring-web坐标)
  使用WebApplicationContextUtils获得应用上下文对象ApplicationContext



代码：


web.xml文件：

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 全局初始化参数 -->
    <context-param>
        <param-name>app1</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>


    <!--配置监听器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <servlet>
        <servlet-name>UserServlet</servlet-name>
        <servlet-class>com.Death.web.UserServlet</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>UserServlet</servlet-name>
        <url-pattern>userServlet</url-pattern>
    </servlet-mapping>

</web-app>





UserServlet.java代码：

public class UserServlet extends HttpServlet {
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        //ApplicationContext app = new ClassPathXmlApplicationContext("applicationContext.xml");
        ServletContext servletContext = this.getServletContext();
        //ApplicationContext app = (ApplicationContext) servletContext.getAttribute("app");
        //ApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);
        WebApplicationContext app = WebApplicationContextUtils.getWebApplicationContext(servletContext);
        UserService userService = app.getBean(UserService.class);
        userService.save();
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        super.doGet(req, resp);
    }
}

































