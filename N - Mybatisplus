MyBatisPlus(简称MP）是基于MyBatis框架基础上开发的增强型工具，旨在简化开发、提高效率

开发方式:
  基于MyBatis使用MyBatisPlus
  基于Spring使用MyBatisPlus
  基于SpringBoot使用MyBatisPlus




步骤:
  1. 创建新模块，选择Spring初始化，并配置模块相关基础信息
  2. 选择当前模块需要使用的技术集（仅保留JDBC)
  3. 手动添加mp起步依赖
    <dependency>
      <groupId>com.baomidou</groupId>
      <artifactId>mybatis-plus-boot-starter</artifactId>
      <version>3.4.1</version>
    </dependency>

    注意事项:
      由于mp并未被收录到idea的系统内置配置，无法直接选择加入

  4. 设置Jdbc参数(application.ym1)
  5. 制作实体类与表结构（类名与表名对应，属性名与字段名对应)
  6. 定义数据接口，继承BaseMapper<User>
    @Mapper
    public interface UserDao extends BaseMapper<User> {}

  7. 测试类中注入dao接口，测试功能




功能        新增                    删除                            修改                  根据id查询                  查询全部 
MP接口  int insert(T t)  int deleteById(Serializable id)  int updateById(T t)  T selectById(Serializable id)  List<T> selectList()  I
           分页查询                                    按条件查询
Page<T> selectPage(IPage<T> page)    IPage<T> selectPage(wrapper<T> querywrapper)




lombok

Lombok,一个Java类库，提供了一组注解，简化PO30实体类开发
  <dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <version>1.18.12</version>
    <scope>provided</scope>
  </dependency>


lombok中常用注解: @Data
  @Data
  public class User {
    private Long id;
    private string name;
    private String password;
    private Integer age;
    private string tel;
  }

作用: 为当前实体类在编译期设置对应的get/set方法，无参/无参构造方法，toString方法，hashCode方法，equals方法等



MP分页查询:
  1. 设置分页拦截器作为Spring管理的bean
  @Configuration
  public class MpCongfig {
    @Bean
    public MybatisPlusInterceptor pageInterceptor(){
      MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
      interceptor.addInnerIiterceptor(new PaginationInnerInterceptor());
      return interceptor;
    }
  }



  2. 执行分页查询
  IPage page = new Page(2,3);
  userDao.selectPage(page, null);
  System.out.println("当前页码:"+page.getCurrent());
  System.out.print1n("每页数据总量:"+page.getSize());
  System.out. println("总页数:“+page.getPages());
  System.out.print1n("数据总量:"+page.getTotal());
  System.out.println("当前页数据:"+page.getRecords());



开启日志:
  mybatis-plus:
    configuration:
      log-impl: org.apache.ibatis.logging.stdout.StdoutImpl



条件查询—设置查询条件

  格式一: 常规格式
    Querywrapper<User> qw = new Querywrapper<User>();
    //查询年龄大于等于18岁，小于65岁的用户
    qw.lt("age",65);
    qw.ge("age",18);
    List<User> userList = userDao.selectList(qw);
    System.out.println(userList);

  格式二:链式编程格式
    Querywrapper<User> qw = new Querywrapper<User>();
    //查询年龄大于等于18岁，小于65岁的用户
    qw.lt("age",65).ge("age",18);
    List<User> userList = userDao.selectList(qw);
    System.out.println(userList);

  格式三: lambda格式（推荐)
    Querywrapper<User> qw = new Querywrapper<User>();
    //查询年龄大于等于18岁，小于65岁的用户
    qw.lambda().lt(User::getAge,65).ge(User::getAge,18);
    List<User> userList = userDao.selectList(qw);
    System.out.println(userList);

    格式四: lambda格式（推荐)
    LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
    //查询年龄大于等于18岁，小于65岁的用户
    lqw.lt(User::getAge,65).ge(User::getAge,18);
    List<User> userList = userDao.selectList(lqw);
    System.out.println(userList);



条件查询—-组合查询条件

并且(and)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  //查询年龄大于等于18岁，小于65岁的用户
  lqw.lt(User::getAge,65).ge(User::getAge,18);
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);

或者(or)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  //查询年龄大于等于18岁，小于65岁的用户
  lqw.lt(User::getAge,65).or().ge(User::getAge, 18);
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);



条件查询-nu1l值处理

条件参数控制
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  lqw.ge(null != userQuery.getAge(),User::getAge,userQuery.getAge());
  lqw.lt(null != userQuery.getAge2(),User::getAge,userQuery.getAge2());
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);

条件参数控制（链式编程)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  lqw.ge(null != userQuery.getAge() ,User::getAge,userQuery.getAge());
     .lt(null != userQuery.getAge2(),User::getAge,userQuery.getAge2());
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);



查询投影:

查询结果包含模型类中部分属性
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  lqw.select(User::getId,User::getName,User::getAge);
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);

查询结果包含模型类中未定义的属性
  Querywrapper<User> qm = new Querywrapper<User>();
  qm.select("count(*) as nums,gender") ;
  qm.groupBy("gender");
  List<Map<String,object>> maps = userDao.selectMaps(qm);
  System.out.println(maps);



查询条件(lt【小于】 le【小于等于】 gt【大于】 ge【大于等于】)

用户登录(eq匹配)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  laqw.eq(User::getName，userQuery.getName()).eq(User::getPassword,userQuery.getPassword());
  User loginUser = userDao.selectOne(lqw);
  System.out.println(loginUser);

购物设定价格区间、户籍设定年龄区间(le ge匹配 或 between匹配)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  //方案一: 设定上限下限
  lqw.le(User::getAge,userQuery.getAge()).ge(User::getAge ,userQuery.getAge2());

  //方案二: 设定范围
  lqw.between(User::getAge,userQuery.getAge(),userQuery.getAge2());
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);

查信息，搜索新闻(非全文检索版: like匹配)
  LambdaQuerywrapper<User> lqw = new LambdaQuerywrapper<User>();
  lqw.likeLeft(User::getTel,userQuery.getTel());//left表示%在左边，例如%J
  List<User> userList = userDao.selectList(lqw);
  System.out.println(userList);

统计报表(分组查询聚合函数)
  Querywrapper<User> qw = new Querywrapper<User>();
  qw.select( "gender" , "count(*) as nums " ) ;
  qw.groupBy("gender");
  List<Map<String,Object>> maps = userDao.selectMaps(qw);
  System.out.println(maps);



名称: @TableField
类型: 属性注解
位置: 模型类属性定义上方
作用: 设置当前属性对应的数据库表中的字段关系
范例:
  public class User {
    @TableField(value="pwd")
    private string password;
  }

相关属性:
  value(默认): 设置数据库表字段名称
  exist: 设置属性在数据库表字段中是否存在，默认为true。此属性无法与value合并使用
  select: 设置属性是否参与查询，此属性与select()映射配置不冲突(可以用来隐藏密码等字段)


名称: @TableName
类型: 类注解
位置: 模型类定义上方
作用: 设置当前类对应与数据库表关系范例:
  @TableName("tbl_user")
  public class User {
    private Long id;
  }

相关属性:
  value: 设置数据库表名称





id生成策略控制

名称: @TableId
类型: 属性注解
位置: 模型类中用于表示主键的属性定义上方
作用: 设置当前类中主键属性的生成策略
范例:
  public class User {
    @TableId(type = IdType.AUTO)
    private Long id;
  }

相关属性:
  value: 设置数据库主键名称
  type: 设置主键属性的生成策略，值参照IdType枚举值



id生成策略控制:
  AUTO(0): 使用数据库id自增策略控制id生成
  NONE(1): 不设置id生成策略
  INPUT(2): 用户手工输入id
  ASSIGN_ID(3): 雪花算法生成id(可兼容数值型与字符串型)
  ASSIGN_UUID(4): 以UUID生成算法作为id生成策略


全局配置
mybatis-plus:
  global-config:
    db-config:
      id-type: auto
      table-prefix: tbl_



多记录操作

按照主键删除多条记录
  List<Long> ids = Arrays.asList(new Long[]{2,3});
  userDao.deleteBatchIds(ids);
根据主键查询多条记录
  List<Long> ids = Arrays.asList(new Long[]{2,3});
  List<User> userList = userDao.selectBatchIds(ids);




逻辑删除:
  删除操作业务问题: 业务数据从数据库中丢弃
  逻辑删除: 为数据设置是否可用状态字段，删除时设置状态字段为不可用状态，数据保留在数据库中


实体类中添加对应字段，并设定当前字段为逻辑删除标记字段
  public class User {
    private Long id;
    @TableLogic              //内部有value值，用于设置哪个标记代表已经删除
    private Integer deleted;
}


配置逻辑删除字面值
  mybatis-plus:
    global-config:
      db-config:
        logic-delete-field: deleted        //方法名
        logic-not-delete-value: 0
        logic-delete-value:1

















