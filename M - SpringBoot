SpringBoot入门程序

步骤:
  1. 创建新模块，选择Spring初始化，并配置模块相关基础信息
  2. 选择当前模块需要使用的技术集
  3. 开发控制器类
  4. 运行自动生成的Application类




spring程序与SpringBoot程序对比

类/配置文件                  Spring                          SpringBoot
pom文件中的坐标              手工添加                          勾选添加
web3.0配置类                 手工制作                            无
Spring/SpringMVC配置类       手工制作                            无
控制器                       手工制作                          手工制作


注意事项:
  基于idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构






SpringBoot项目快速启动

步骤:
  1. 对SpringBoot项目打包（执行Maven构建指令package)
  2. 执行启动指令
      java -jar springboot.jar



注意事项:
  jar支持命令行启动需要依赖maven插件支持，请确认打包时是否具有SpringBoot对应的maven插件







SpringBoot概述

SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程
Spring程序缺点:
  配置繁琐
  依赖设置繁琐
SpringBoot程序优点:
  自动配置
  起步依赖(简化依赖配置) 
  辅助功能(内置服务器，......)




SpringBoot起步依赖

starter
  SpringBoot中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的

parent
  所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的
  spring-boot-starter-parent (2.5.0)与spring-boot-starter-parent (2.4.6）共计57处坐标版本不同

实际开发
  使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供如发生坐标错误，再指定version(要小心版本冲突)



使用maven依赖管理变更起步依赖项
<dependencies>
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <! --web起步依赖环境中，排除Tomcat起步依赖-->
    <exclusions>
      <exclusion>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-tomcat</artifactId>
      </exclusion>
    </exclusions>
  </dependency>

  <! --添加etty起步依赖，版本由SpringBoot的starter控制-->
  <dependency>
    <groupid>org.springframework. boot</groupId>
    <artifactId>spring-boot-starter-jetty</artifactId>
  </dependency>
</dependencies>


Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat)，谷歌应用引擎（GAE）已经全面切换为Jetty




SpringBoot提供了多种属性配置方式

application.properties文件:
  server.port=80

application.yml文件:
  server:
    port: 81
application.yaml文件:
  server:
    port: 82


SpringBoot配置文件加载顺序（了解)
  application.properties > application.yml > application.yam1




yaml

YAML (YAML Ain't Markup Language) ，一种数据序列化格式
  优点:
    容易阅读
    容易与脚本语言交互
    以数据为核心，重数据轻格式
YAML文件扩展名
  .yml(主流)
  .yaml



yaml语法规则:
  大小写敏感
  属性层级关系使用多行描述，每行结尾使用冒号结束
  使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键)
  属性值前面添加空格（属性名与属性值之间使用冒号 + 空格作为分隔)
  #表示注释

核心规则:数据前面要加空格与冒号隔开



数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔



yaml数据读取：
  使用@Value读取单个数据，属性名引用方式:${一级属性名.二级属性名....]
  封装全部数据到Environment对象
  自定义对象封装指定数据




多环境启动

spring:
  profiles:
    active: pro
---
server:
  port: 80

spring:
  profiles: pro      过时格式





spring:
  profiles:
    active: pro
---
server:
  port: 80

spring:
  config:
    activate:
      on-profile: pro   推荐格式


带参数启动SpringBoot:
  java -jar springboot.jar --spring.profiles.active=test
  java -jar springboot.jar --server.port=88
  java -jar springboot.jar --server.port=88 --spring.profiles.active=test




Maven指令执行完毕后，生成了对应的包，其中类参与编译，但是配置文件并没有编译，而是复制到包中

解决思路: 对于源码中非java类的操作要求加载Maven对应的属性，解析${}占位符


对资源文件开启对默认占位符的解析
<build>
  <plugins>
    <plugin>
      <artifactId>maven-resources-plugin</artifactId>
      <configuration>
        <encoding>utf-8</encoding>
        <useDefaultDelimiters>true</useDefaultDelimiters>
      </configuration>
    </plugin>
  </plugins>
</build>





配置文件分类:

SpringBoot中4级配置文件
  1级: file : config/application.yml      【最高】    (file指 在打包文件中)
  2级: file : application.yml
  3级: classpath: config/application.yml
  4级: classpath: application.yml           【最低】  (classpath指 编译器中)

作用:
  1级与2级留做系统打包后设置通用属性
  3级与4级用于系统开发阶段设置通用属性



整合JUnit

SpringBoot整合JUnit:
  @SpringBootTest
  class Springboot07JunitApplicationTests {
    @Autowired
    private BookService bookService;

    @Test
    public void testSave(){
      bookService.save();
    }
  }




名称: @SpringBootTest
类型: 测试类注解
位置: 测试类定义上方
作用: 设置JUnit加载的SpringBoot启动类
范例:
  @SpringBootTest(classes = Springboot07JunitApplication.class)
  class Springboot07JunitApplicationTests {}

相关属性:
  classes: 设置SpringBoot启动类

注意事项:
  如果测试类在SpringBoot启动类的包或子包中，可以省略启动类的设置，也就是省略classes的设定



SpringBoot整合MyBatis

步骤:
  1. 创建新模块，选择Spring初始化，并配置模块相关基础信息
  2. 选择当前模块需要使用的技术集（MyBatis、MySQL)
  3. 设置数据源参数
      spring:
        datasource:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://localhost:3306/ssm_db
          username: root
          password: root

      注意事项:
          SpringBoot版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区
          jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC或在MySQL数据库端配置时区解决此问题



4. 定义数据层接口与映射配置
  @Mapper
  public interface UserDao {
    @select("select * from user")
    public List<User> getAl1();
  }


5. 测试类中注入dao接口，测试功能
  @SpringBootTest
  class Springboot08MybatisApplicationTests {
    @Autowired
    private BookDao bookDao;

    @Test
    public void testGetById( ) {
      Book book = bookDao.getById(1);
        System.out.print1n(book);
      }
    }  














































